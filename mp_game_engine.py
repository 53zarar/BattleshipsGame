from components import initialise_board, create_battleships, place_battleships
from game_engine import cli_coordinates_input, attack
from typing import Tuple
import random
import json

#create an empty dictionary, players
players = {}

def generate_attack(board_size: int = 10) -> Tuple[int, int]:
    '''Generates random attack within the board size and returns the attack coordinates'''
    # Generates random attack coordinates
    x: int = random.randint(0, board_size - 1)
    y: int = random.randint(0, board_size - 1)
    return (x, y)

def ai_opponent_game_loop() -> None:
    '''Where the game between the user and AI actually takes place. Firstly welcomes the user and allows 
    them to input all x,y coordinates for their ships and their orientations. Then creates the boards and 
    places the user's ships where they chose, and the AI's ships are placed randomly. Then the user enters
    their guess for the AI ships and they get a message saying if they hit, missed or sunk a ship. A random
    attack is generated by the AI, and it is also displayed whether the AI hit, missed or sunk a ship. The 
    game is finished when either the AI or User has no more ships and the winner is stated.'''
    game_over = False
    print("WELCOME TO BATTLESHIPS!")

    #allows user to enter username
    username = input('Enter a username: ')

    #allows user to enter all coordinates and orientations for their ships
    aircraft_x = int(input('Enter your X coordinate for the Aircraft Carrier: '))
    aircraft_y = int(input('Enter your Y coordinate for the Aircraft Carrier: '))
    aircraft_ori = input('Enter your orientation for the Aircraft Carrier as h or v: ')
    battleship_x = int(input('Enter your X coordinate for the Battleship: '))
    battleship_y = int(input('Enter your Y coordinate for the Battleship: '))
    battleship_ori = input('Enter your orientation for the Battleship as h or v: ')
    cruiser_x = int(input('Enter your X coordinate for the Cruiser: '))
    cruiser_y = int(input('Enter your Y coordinate for the Cruiser: '))
    cruiser_ori = input('Enter your orientation for the Cruiser as h or v: ')
    submarine_x = int(input('Enter your X coordinate for the Submarine: '))
    submarine_y = int(input('Enter your Y coordinate for the Submarine: '))
    submarine_ori = input('Enter your orientation for the Submarine as h or v: ')
    destroyer_x = int(input('Enter your X coordinate for the Destroyer: '))
    destroyer_y = int(input('Enter your Y coordinate for the Destroyer: '))
    destroyer_ori = input('Enter your orientation for the Destroyer as h or v: ') 

    #assigns coordinates to the ships
    y = {"Aircraft_Carrier": [aircraft_x, aircraft_y, aircraft_ori], 
         "Battleship": [battleship_x, battleship_y, battleship_ori],
         "Cruiser": [cruiser_x, cruiser_y, cruiser_ori],
         "Submarine":[submarine_x, submarine_y, submarine_ori], 
         "Destroyer":[destroyer_x, destroyer_y, destroyer_ori]}

    #puts new coordinates and ships in a new user placement file
    with open('User_Placement.json', 'w') as f:
        json.dump(y, f)

    #creates the boards and battleships for the user and AI
    players[username] = {'board': initialise_board(), 'battleships': create_battleships()}
    players['AI_opponent'] = {'board': initialise_board(), 'battleships': create_battleships()}

    #places the battleships using custom placement for the user and random placement for the AI
    place_battleships(players[username]['board'], players[username]['battleships'], algorithm='custom')
    place_battleships(players['AI_opponent']['board'], players['AI_opponent']['battleships'], algorithm='random')

    #loop to check if the game is over
    while not game_over:
        # displays user's board
        print(f"\n{username}'s Board:")
        for row in players[username]['board']:
            print(row)

        x, y = cli_coordinates_input()
        hit, sunk = attack((x, y), players['AI_opponent']['board'], players['AI_opponent']['battleships'])
        if hit:
            print('Hit!')
            if sunk:
                print('You sunk a battleship!')
        else:
            print('You Missed!')

        #checks if all AI ships are sunk and if they are it ends the game
        if all(all(x is None for x in row) for row in players['AI_opponent']['board']):
            print(f"{username}, You won! All AI Opponent's battleships are sunk.")
            game_over = True
            break

        # AI opponent's turn
        ai_x, ai_y = generate_attack(len(players[username]['board']))
        ai_hit, ai_sunk = attack((ai_x, ai_y), players[username]['board'], players[username]['battleships'])
        print(f"\nAI Opponent's Turn:")

        if ai_hit:
            print('AI Opponent Hit!')
            if ai_sunk:
                print('AI Opponent sunk one of your battleships!')
        else:
            print('AI Opponent Miss!')

        #checks if all user ships are sunk and if they are it ends the game
        if all(all(x is None for x in row) for row in players[username]['board']):
            print(f"AI, You won! All {username}'s battleships are sunk.")
            game_over = True
            break

if __name__ == "__main__":
    ai_opponent_game_loop()
